runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('verification.R')
library(firebase)
library(jsonlite)
# Function to get user data from Firebase Authentication
get_user_data <- function(id_token) {
url <- "https://identitytoolkit.googleapis.com/v1/accounts:lookup"
body <- toJSON(list(idToken = id_token))
response <- POST(url, body = body, add_headers("Content-Type" = "application/json"))
data <- content(response, "parsed")
return(data)
}
# Function to check if user is signed in
is_user_signed_in <- function(id_token) {
if (!is.null(id_token) && id_token != "") {
# User is signed in
return(TRUE)
} else {
# User is not signed in
return(FALSE)
}
}
config <- read_config()  # Assuming you've configured Firebase
# Function to get user data from Firebase Authentication
get_user_data <- function(id_token) {
url <- "https://identitytoolkit.googleapis.com/v1/accounts:lookup"
body <- toJSON(list(idToken = id_token))
response <- POST(url, body = body, add_headers("Content-Type" = "application/json"))
data <- content(response, "parsed")
return(data)
}
# Function to check if user is signed in
is_user_signed_in <- function(id_token) {
if (!is.null(id_token) && id_token != "") {
# User is signed in
return(TRUE)
} else {
# User is not signed in
return(FALSE)
}
}
# Example usage
config <- read_config()
shiny::runApp()
runApp()
summary(flights)
library(nycflights13)
library(tidyverse)
# Load the flights dataset
data(flights)
skimr::skim(flights)
summary(flights)
flights_df <- flights %>%
mutate(month = month.name[month]) %>%
na.omit()
flights_df %>%
count(month)
# Filter flights with distance greater than 1000 miles
flights_long_distance <- flights_df[distance > 1000]
flights_df %>%
filter(distance > 1000)
# Filter flights with distance greater than 1000 miles
flights_long_distance <- flights_df %>%
filter(distance > 2000)
flights_df %>%
filter(distance > 2000)
flights_df %>%
filter(distance > 2000) %>%
select(dest,origin)
flights_df %>%
filter(distance > 2000) %>%
count(dest,origin)
flights_df %>%
filter(distance > 2000) %>%
count(dest,origin, sort = TRUE)
flights_df %>%
filter(distance > 3000) %>%
count(dest,origin, sort = TRUE)
data("airlines")
View(airlines)
# List all datasets available in the nycflights13 package
datasets_list <- data(package = "nycflights13")$results[, "Item"]
datasets_list
data("airports")
view(airports)
colnames()
colnames(airports)
View(flights)
airports %>% count(name)
planes
airports %>% count(name, sort = TRUE)
library(nycflights13)
library(tidyverse)
# List all datasets available in the nycflights13 package
datasets_list <- data(package = "nycflights13")$results[, "Item"]
# Load the flights dataset
data(flights)
data("airlines")
data("airports")
skimr::skim(flights)
summary(flights)
# Summary of numerical variables
summary(flights_df[c("dep_delay", "arr_delay", "air_time", "distance")])
flights_df <- flights %>%
mutate(month = month.name[month]) %>%
na.omit()
flights_df %>%
count(month)
# Filter flights with distance greater than 1000 miles
flights_df %>%
filter(distance > 3000) %>%
count(dest,origin, sort = TRUE)
flights_df %>%
count(day,sort = TRUE)
group_by(day) %>%
summarise()
flights_df %>%
count(day,sort = TRUE)
group_by(day) %>%
summarise(mean_time = mean(airtime))
flights_df %>%
count(day,sort = TRUE)
group_by(month) %>%
summarise(mean_time = mean(airtime))
flights_df %>%
group_by(month) %>%
summarise(mean_time = mean(airtime))
flights_df
flights_df %>%
group_by(month) %>%
summarise(mean_time = mean(airtime))
flights_df %>%
group_by(month) %>%
summarise(mean_time = mean(distance))
flights_df %>%
group_by(month) %>%
summarise(distance_covered = sum(distance))
flights_df %>%
group_by(month) %>%
summarise(distance_covered = sum(distance)) %>%
arrange(desc(distance_covered))
view
view
View(flights_df)
flights_df
flights_df
flights_df
flights_df %>% count(carrier)
flights_df %>% count(carrier, sort = TRUE)
flights_df
# Frequency table for origin
table(flights_df$origin)
# Frequency table for destination
table(flights_df$dest)
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
colnames(flights)
runApp('emailLink.R')
flights
runApp('emailLink.R')
colnames(flights)
runApp('emailLink.R')
runApp('emailLink.R')
flights %>% filter(dest == "ATL")
runApp('emailLink.R')
flights %>% count(carrier)
runApp('emailLink.R')
flights$time_hour
runApp('verification.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
library(nycflights13)
# Load the flights dataset
data("flights")
# Subset the data for UA carrier
ua_flights <- subset(flights, carrier == "UA")
# Calculate the number of flights
num_flights <- nrow(ua_flights)
# Display the result
cat("Number of Flights by UA Carrier:", num_flights, "\n")
library(nycflights13)
library(ggplot2)
# Load the flights dataset
data("flights")
# Subset the data for UA carrier
ua_flights <- subset(flights, carrier == "UA")
# Count the number of flights by month
flights_by_month <- table(ua_flights$month)
# Convert the result to a data frame
flights_by_month_df <- data.frame(month = names(flights_by_month),
flights = as.numeric(flights_by_month))
# Plot the number of flights by month
ggplot(data = flights_by_month_df, aes(x = month, y = flights)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Number of Flights by Month (UA Carrier)",
x = "Month", y = "Number of Flights") +
theme_minimal()
runApp('emailLink.R')
runApp('emailLink.R')
library(nycflights13)
library(ggplot2)
# Load the flights dataset
data("flights")
# Subset the data for the selected carrier
carrier <- "UA"  # Example: Replace "UA" with the desired carrier code
filtered_data <- subset(flights, carrier == carrier)
# Count number of flights by month
flights_by_month <- table(filtered_data$month)
# Convert to data frame
flights_by_month_df <- data.frame(month = as.integer(names(flights_by_month)),
flights = as.numeric(flights_by_month))
# Plot
ggplot(flights_by_month_df, aes(x = month, y = flights)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = paste("Number of Flights by Month for", carrier),
x = "Month", y = "Number of Flights") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
library(nycflights13)
library(ggplot2)
# Load the flights dataset
data("flights")
# Subset the data for the selected carrier
carrier <- "UA"  # Example: Replace "UA" with the desired carrier code
filtered_data <- subset(flights, carrier == carrier)
# Count number of flights by month
flights_by_month <- table(filtered_data$month)
# Convert to data frame
flights_by_month_df <- data.frame(month = as.integer(names(flights_by_month)),
flights = as.numeric(flights_by_month))
# Plot
ggplot(flights_by_month_df, aes(x = month, y = flights)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = paste("Number of Flights by Month for", carrier),
x = "Month", y = "Number of Flights") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
library(nycflights13)
library(ggplot2)
# Load the flights dataset
data("flights")
# Subset the data for the selected carrier
carrier <- "UA"  # Example: Replace "UA" with the desired carrier code
filtered_data <- subset(flights, carrier == carrier)
# Convert numeric month values to month names
filtered_data$month <- month.name[filtered_data$month]
# Count number of flights by month
flights_by_month <- table(filtered_data$month)
# Convert to data frame
flights_by_month_df <- data.frame(month = as.character(names(flights_by_month)),
flights = as.numeric(flights_by_month))
# Plot
ggplot(flights_by_month_df, aes(x = month, y = flights)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = paste("Number of Flights by Month for", carrier),
x = "Month", y = "Number of Flights") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('verification.R')
runApp('emailLink.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('emailLink.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('emailLink.R')
runApp('verification.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
library(shiny); runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('delete.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
library(shiny); runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
runApp('verification.R')
library(shiny); runApp('verification.R')
runApp('delete.R')
runApp('emailLink.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('delete.R')
runApp('verification.R')
runApp('verification.R')
runApp()
runApp('delete.R')
library(shiny); runApp('verification.R')
runApp('verification.R')
runApp('delete.R')
runApp('delete.R')
load("C:/Users/USER/OneDrive/Desktop/data analysis/R/Acess/app/.RData")
library(shiny); runApp('work.R')
runApp('work.R')
runApp('work.R')
runApp('work.R')
runApp('work.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp('emailLink.R')
runApp()
runApp()
library(firebase)
# Initialize Firebase connection
f <- FirebaseEmailPassword$new()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny); runApp('work.R')
runApp('work.R')
runApp('work.R')
runApp('work.R')
runApp('delete.R')
runApp('work.R')
library(shiny); runApp('work.R')
library(httr)
repo_owner <- "edgar595"
repo_name <- "actserv"
collaborator <- "actservit"
response <- httr::PUT(
url = paste0("https://api.github.com/repos/", repo_owner, "/", repo_name, "/collaborators/", collaborator),
config = httr::add_headers(
Authorization = paste("token", Sys.getenv("GITHUB_PAT")) # Provide your GitHub Personal Access Token here
)
)
if (response$status_code == 204) {
cat("Collaborator", collaborator, "added successfully to the repository.")
} else {
cat("Failed to add collaborator:", response$status_code)
}
library(shiny); runApp('work.R')
